{
  "name": "nodefy",
  "version": "0.2.0",
  "description": "convert AMD modules into a node.js compatible format",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "./node_modules/.bin/jasmine-node test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/millermedeiros/nodefy.git"
  },
  "keywords": [
    "amd",
    "cjs",
    "modules",
    "convert"
  ],
  "author": {
    "name": "Miller Medeiros",
    "url": "http://blog.millermedeiros.com/"
  },
  "dependencies": {
    "esprima": ">= 1.0 <1.2",
    "glob": "~3.1.14",
    "async": "~0.1.22",
    "commander": "~1.1.0"
  },
  "devDependencies": {
    "jasmine-node": "~1.0.26"
  },
  "bin": {
    "nodefy": "bin/nodefy"
  },
  "engine": {
    "node": ">= 0.8"
  },
  "license": "MIT",
  "readme": "# nodefy\n\nconvert AMD modules into a node.js compatible format.\n\n\n\n## How?\n\nThis tool uses [Esprima](http://esprima.org/) to parse the code and replace\n`define()` calls, doing the less amount of changes as possible to the code.\n\n### Input\n\n```js\ndefine(['foo', '../bar/baz'], function(foo, baz){\n\n    var lorem = 'ipsum';\n\n    return {\n        log : function(){\n            console.log(lorem);\n        }\n    };\n\n});\n```\n\n### Output\n\n```js\n    var foo = require('foo');\n    var baz = require('../bar/baz');\n\n    var lorem = 'ipsum';\n\n    module.exports = {\n        log : function(){\n            console.log(lorem);\n        }\n    };\n```\n\n\n## CLI\n\nYou can use it as a CLI tool:\n\n    [sudo] npm install -g nodefy\n    nodefy -o cjs \"src/**.js\"\n\nThis will convert all \".js\" files inside the `src` folder and put the results\non the `cjs` folder.\n\nIt also works with `stdin` and `stdout`:\n\n    cat \"src/foo.js\" | nodefy\n\nFor a list of available options run:\n\n    nodefy -h\n\n\n## Standalone Lib\n\nIt is also available as a regular node.js library.\n\n```js\nvar nodefy = require('nodefy');\n\n// nodefy.parse(string)\n// returns node.js style module\nvar cjsModule = nodefy.parse(jsString);\n\n// nodefy.convert(inputPath [, outputPath], callback)\n// if outputPath is omitted it won't write the result\nnodefy.convert('foo.js', function(err, result){\n    console.log(result);\n});\n\n// nodefy.batchConvert(glob [, outputFolder], callback)\n// if outputFolder is omitted it won't write the result\nnodefy.batchConvert('src/**.js', 'cjs', function(err, results){\n    // results is an array of {sourcePath, outputPath, result}\n});\n```\n\n\n## Inspiration / Why?\n\nI couldn't find any tool that did what I wanted - convert AMD modules into\nplain node.js - so I decided to code my own. There are alternatives but they\nall add more complexity than I wanted.\n\nThis project was created mainly because of\n[amd-utils](http://millermedeiros.github.com/amd-utils/), since many methods\nare useful on both environments.\n\nThe name was inpired by\n[browserify](https://github.com/substack/node-browserify).\n\n\n## Alternatives\n\n - [amdefine](https://github.com/jrburke/amdefine)\n - [UMD](https://github.com/umdjs/umd)\n - [r.js](https://github.com/jrburke/r.js)\n - [uRequire](https://github.com/anodynos/uRequire)\n\n\n## License\n\nReleased under the MIT license\n\n",
  "_id": "nodefy@0.2.0",
  "_from": "nodefy@0.2.x"
}
